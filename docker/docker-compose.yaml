services:
  # HAProxy Load Balancer
  haproxy:
    image: haproxy:2.8
    container_name: haproxy
    hostname: haproxy
    ports:
      - "8080:8080"   # Main HTTP server
      - "4225:4225"   # Up socket (commands)
      - "4226:4226"   # Down socket (updates)
      - "8404:8404"   # HAProxy stats
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    networks:
      - minare_net
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "sh", "-c", "chronyc tracking && timeout 2 chronyd -q 'server 127.0.0.1'"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 45s

  # Local NTP Server for fast cluster synchronization
  ntp-server:
    image: alpine:latest
    container_name: minare-ntp
    hostname: ntp-server
    restart: unless-stopped
    user: root
    command: |
      sh -c "
      apk add chrony &&
      echo 'server 0.pool.ntp.org iburst' > /etc/chrony/chrony.conf &&
      echo 'server 1.pool.ntp.org iburst' >> /etc/chrony/chrony.conf &&
      echo 'allow all' >> /etc/chrony/chrony.conf &&
      echo 'makestep 1.0 3' >> /etc/chrony/chrony.conf &&
      echo 'driftfile /var/lib/chrony/chrony.drift' >> /etc/chrony/chrony.conf &&
      mkdir -p /var/lib/chrony &&
      chronyd -d -f /etc/chrony/chrony.conf
      "
    ports:
      - "123:123/udp"  # NTP port
    networks:
      - minare_net
    cap_add:
      - SYS_TIME
      - SYS_NICE
    healthcheck:
      test: ["CMD", "chronyc", "tracking"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Minare Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: minare-app
    hostname: app
    user: root
    volumes:
      - ./app.jar:/app/app.jar:ro
      - ./logs:/app/logs
    environment:
      - MONGO_URI=mongodb://mongodb-rs:27017/minare?replicaSet=rs0
      - REDIS_URI=redis://redis:6379
      - JAVA_OPTS=-Xmx512m -XX:+UseContainerSupport
      - NTP_URL=ntp-server
      - JAVA_DEBUG=${JAVA_DEBUG:-false}
      - JAVA_DEBUG_PORT=${JAVA_DEBUG_PORT:-5005}
      - JAVA_DEBUG_SUSPEND=${JAVA_DEBUG_SUSPEND:-y}
    ports:
      - "${JAVA_DEBUG_PORT:-5005}:${JAVA_DEBUG_PORT:-5005}"
    networks:
      - minare_net
    depends_on:
      ntp-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    cap_add:
      - SYS_TIME
    expose:
      - "8080"
      - "4225"
      - "4226"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # MongoDB with Replica Set
  mongodb:
    image: mongo:latest
    container_name: mongodb
    hostname: mongodb-rs
    command: ["--replSet", "rs0", "--bind_ip_all"]
    ports:
      - "27017:27017"
    volumes:
      - ./data/db:/data/db
      - ./scripts:/scripts
    networks:
      minare_net:
        aliases:
          - mongodb-rs
    healthcheck:
      test: mongosh --eval "db.adminCommand('ping')"
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    entrypoint: ["/scripts/init.sh"]

  # Redis
  redis:
    image: redis/redis-stack-server:latest
    container_name: redis
    hostname: redis
    ports:
      - "6379:6379"
    volumes:
      - ./data/redis:/data
    networks:
      - minare_net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  # Development scaling - uncomment to test clustering
  # app2:
  #   build:
  #     context: ..
  #     dockerfile: docker/Dockerfile
  #   container_name: minare-app2
  #   hostname: app2
  #   volumes:
  #     - ./app.jar:/app/app.jar:ro
  #     - ./logs2:/app/logs
  #   environment:
  #     - MONGO_URI=mongodb://mongodb-rs:27017/minare?replicaSet=rs0
  #     - REDIS_URI=redis://redis:6379
  #     - JAVA_OPTS=-Xmx512m -XX:+UseContainerSupport
  #     # Debug on different port for second instance
  #     - JAVA_DEBUG=${JAVA_DEBUG:-false}
  #     - JAVA_DEBUG_PORT=${JAVA_DEBUG_PORT2:-5006}
  #     - JAVA_DEBUG_SUSPEND=${JAVA_DEBUG_SUSPEND:-y}
  #   ports:
  #     - "${JAVA_DEBUG_PORT2:-5006}:${JAVA_DEBUG_PORT2:-5006}"
  #   networks:
  #     - minare_net
  #   depends_on:
  #     mongodb:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #   cap_add:
  #     - SYS_TIME
  #   expose:
  #     - "8080"
  #     - "4225"
  #     - "4226"
  
networks:
  minare_net:
    name: minare_net
    driver: bridge