global
    log stdout local0
    maxconn 4096
    # stats socket disabled to avoid permission issues
    # stats socket /tmp/haproxy.sock mode 660 level admin

defaults
    log global
    mode http
    option httplog
    option dontlognull
    option http-server-close
    option forwardfor except 127.0.0.0/8
    option redispatch
    retries 3
    timeout http-request 10s
    timeout queue 1m
    timeout connect 10s
    timeout client 1h
    timeout server 1h
    timeout http-keep-alive 10s
    timeout check 10s
    maxconn 3000

# Stats page
stats enable
stats uri /stats
stats refresh 30s
stats show-node

# Main HTTP frontend (port 8080)
frontend http_frontend
    bind *:8080
    default_backend http_backend

# Up Socket frontend (port 4225) - Commands
frontend up_socket_frontend
    bind *:4225
    # WebSocket upgrade detection
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_websocket_conn hdr_beg(Connection) -i upgrade

    # Route WebSocket traffic
    use_backend up_socket_backend if is_websocket is_websocket_conn

    # Fallback for HTTP health checks, etc.
    default_backend up_socket_backend

# Down Socket frontend (port 4226) - Updates
frontend down_socket_frontend
    bind *:4226
    # WebSocket upgrade detection
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_websocket_conn hdr_beg(Connection) -i upgrade

    # Route WebSocket traffic
    use_backend down_socket_backend if is_websocket is_websocket_conn

    # Fallback for HTTP health checks, etc.
    default_backend down_socket_backend

# Main HTTP backend - Workers only, using DNS service discovery
backend http_backend
    balance roundrobin
    # Use Docker Compose service DNS for dynamic discovery
    # This will resolve to all containers with the service name "worker"
    server-template worker- 10 worker:8080 check resolvers docker_resolver init-addr none

# Up Socket backend - STICKY SESSIONS based on source IP
backend up_socket_backend
    # Sticky sessions based on source IP for connection affinity
    balance source

    # WebSocket-specific options
    option httpchk GET /command/health
    http-check expect status 200

    # Long timeouts for WebSocket connections
    timeout server 3600s
    timeout tunnel 3600s

    # Dynamic worker discovery
    server-template worker- 10 worker:4225 check resolvers docker_resolver init-addr none

# Down Socket backend - ROUND ROBIN (stateless)
backend down_socket_backend
    balance roundrobin

    # WebSocket-specific options
    option httpchk GET /health
    http-check expect status 200

    # Long timeouts for WebSocket connections
    timeout server 3600s
    timeout tunnel 3600s

    # Dynamic worker discovery
    server-template worker- 10 worker:4226 check resolvers docker_resolver init-addr none

# DNS resolver for Docker's internal DNS
resolvers docker_resolver
    nameserver docker 127.0.0.11:53
    resolve_retries 3
    timeout resolve 1s
    timeout retry 1s
    hold valid 10s
    hold nx 10s
