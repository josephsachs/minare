global
    daemon
    log stdout local0 info
    maxconn 4096
    tune.ssl.default-dh-param 2048

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option http-server-close
    option redispatch
    retries 3
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout tunnel 3600s  # Important for WebSockets

# Statistics interface
frontend stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 10s
    stats admin if TRUE

# Main HTTP frontend (port 8080)
frontend http_frontend
    bind *:8080
    default_backend http_backend

# Up Socket frontend (port 4225) - Commands
frontend up_socket_frontend
    bind *:4225
    # WebSocket upgrade detection
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_websocket_conn hdr_beg(Connection) -i upgrade

    # Route WebSocket traffic
    use_backend up_socket_backend if is_websocket is_websocket_conn

    # Fallback for HTTP health checks, etc.
    default_backend up_socket_backend

# Down Socket frontend (port 4226) - Updates
frontend down_socket_frontend
    bind *:4226
    # WebSocket upgrade detection
    acl is_websocket hdr(Upgrade) -i websocket
    acl is_websocket_conn hdr_beg(Connection) -i upgrade

    # Route WebSocket traffic
    use_backend down_socket_backend if is_websocket is_websocket_conn

    # Fallback for HTTP health checks, etc.
    default_backend down_socket_backend

# Main HTTP backend - Workers only, coordinator excluded
backend http_backend
    balance roundrobin
    # Worker instance for public traffic
    server app-worker app-worker:8080 check inter 10s fall 3 rise 2
    # Uncomment for additional workers:
    # server app-worker2 app-worker2:8080 check inter 10s fall 3 rise 2

# Frame coordinator backend - Admin access only, not publicly exposed
# This can be used for direct monitoring or administrative tasks
backend coordinator_backend
    balance first
    server app-coordinator app-coordinator:8080 check inter 10s fall 3 rise 2

# Up Socket backend - STICKY SESSIONS based on source IP
backend up_socket_backend
    # Sticky sessions based on source IP for connection affinity
    balance source

    # WebSocket-specific options
    option httpchk GET /command/health
    http-check expect status 200

    # Long timeouts for WebSocket connections
    timeout server 3600s
    timeout tunnel 3600s

    # Worker instance for public traffic
    server app-worker app-worker:4225 check inter 10s fall 3 rise 2
    # Uncomment for additional workers:
    # server app-worker2 app-worker2:4225 check inter 10s fall 3 rise 2

# Down Socket backend - ROUND ROBIN (already stateless)
backend down_socket_backend
    balance roundrobin

    # WebSocket-specific options
    option httpchk GET /health
    http-check expect status 200

    # Long timeouts for WebSocket connections
    timeout server 3600s
    timeout tunnel 3600s

    # Worker instance for public traffic
    server app-worker app-worker:4226 check inter 10s fall 3 rise 2
    # Uncomment for additional workers:
    # server app-worker2 app-worker2:4226 check inter 10s fall 3 rise 2
